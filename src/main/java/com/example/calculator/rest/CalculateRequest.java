package com.example.calculator.rest;

import com.example.calculator.model.Distance;
import com.example.calculator.model.DistanceUnit;
import com.example.calculator.model.Operation;
import com.example.calculator.rest.parser.DistanceDeserializer;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import java.util.Objects;

public class CalculateRequest {

    @JsonDeserialize(using = DistanceDeserializer.class)
    private final Distance distance1;

    @JsonDeserialize(using = DistanceDeserializer.class)
    private final Distance distance2;

    private Operation operation;

    private final DistanceUnit resultUnit;


    // region Constructor, getters, setters, equals, hashCode, toString, builder -- generated by BoB the Builder of Beans
    // The code below has been generated by BoB the Builder of Beans based on the class' fields.
    // Everything after this comment will be regenerated if you invoke BoB again.
    // If you don't know who BoB is, you can find him here: https://bitbucket.org/atlassianlabs/bob-the-builder-of-beans

    @JsonCreator
    public CalculateRequest(@JsonProperty("distance1") Distance distance1, @JsonProperty("distance2") Distance distance2, @JsonProperty("operation") Operation operation, @JsonProperty("resultUnit") DistanceUnit resultUnit) {
        this.distance1 = distance1;
        this.distance2 = distance2;
        this.operation = operation;
        this.resultUnit = resultUnit;
    }

    public Distance getDistance1() {
        return distance1;
    }

    public Distance getDistance2() {
        return distance2;
    }

    public Operation getOperation() {
        return operation;
    }

    public void setOperation(Operation operation) {
        this.operation = operation;
    }

    public DistanceUnit getResultUnit() {
        return resultUnit;
    }

    @Override
    public String toString() {
        return distance1.toString() + operation + distance2 + "=" + resultUnit;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CalculateRequest that = (CalculateRequest) o;
        return Objects.equals(distance1, that.distance1) && Objects.equals(distance2, that.distance2) && operation == that.operation && resultUnit == that.resultUnit;
    }

    @Override
    public int hashCode() {
        return Objects.hash(distance1, distance2, operation, resultUnit);
    }

    // region Builder -- generated by BoB the Builder of Beans
    public static CalculateRequest.Builder builder() {
        return new CalculateRequest.Builder();
    }

    public static CalculateRequest.Builder builder(CalculateRequest data) {
        return new CalculateRequest.Builder(data);
    }

    public static final class Builder {

        private Distance distance1;
        private Distance distance2;
        private Operation operation;
        private DistanceUnit resultUnit;

        private Builder() {
        }

        private Builder(CalculateRequest initialData) {
            this.distance1 = initialData.distance1;
            this.distance2 = initialData.distance2;
            this.operation = initialData.operation;
            this.resultUnit = initialData.resultUnit;
        }

        public Builder setDistance1(Distance distance1) {
            this.distance1 = distance1;
            return this;
        }

        public Builder setDistance2(Distance distance2) {
            this.distance2 = distance2;
            return this;
        }

        public Builder setOperation(Operation operation) {
            this.operation = operation;
            return this;
        }

        public Builder setResultUnit(DistanceUnit resultUnit) {
            this.resultUnit = resultUnit;
            return this;
        }

        public CalculateRequest build() {
            return new CalculateRequest(distance1, distance2, operation, resultUnit);
        }
    }// endregion Builder
    // endregion Constructor, getters, setters, equals, hashCode, toString, builder
}
